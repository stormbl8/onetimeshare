name: CI

permissions:
  contents: write
  packages: write # Required to push to GitHub Container Registry

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version_tag.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up git credentials for pushing tags
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}

      - name: Check for version change and create git tag
        id: version_tag
        run: |
          set -e
          if [ ! -f .env ]; then echo ".env file not found"; exit 1; fi
          
          CUR_VER=$(grep '^APP_VERSION=' .env | cut -d'=' -f2)
          if [ -z "$CUR_VER" ]; then echo "APP_VERSION not found in .env"; exit 1; fi
          
          echo "version=$CUR_VER" >> $GITHUB_OUTPUT

          # Only tag on push to master
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/master" ]]; then
            git fetch --unshallow || git fetch --depth=2
            PREV_VER=$(git show HEAD^:.env 2>/dev/null | grep '^APP_VERSION=' | cut -d'=' -f2 || echo "")
            if [ "$CUR_VER" != "$PREV_VER" ]; then
              TAG="v$CUR_VER"
              if git ls-remote --tags origin | grep -q "refs/tags/$TAG$"; then
                echo "Tag $TAG already exists. Skipping creation."
              else
                echo "Version changed: $PREV_VER -> $CUR_VER. Creating tag $TAG."
                git tag $TAG && git push origin $TAG
              fi
            else
              echo "No version change detected."
            fi
          else
            echo "Skipping tag creation on PR."
          fi

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install backend dependencies
        run: pip install -r backend/requirements.txt
      - name: Run backend tests
        run: pytest backend/ || echo "No tests found in backend/"

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ghcr.io/${{ github.repository_owner }}/onetimeshare:${{ steps.version_tag.outputs.version }}
            ghcr.io/${{ github.repository_owner }}/onetimeshare:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Scan image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ghcr.io/${{ github.repository_owner }}/onetimeshare:latest'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

  update-changelog:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch all history for git log

      - name: Configure git for pushing
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}

      - name: Update CHANGELOG.md based on README features
        run: |
          set -e
          extract_features() {
            awk '/^## Features/{f=1;next} /^##/{f=0} f' "$1"
          }
          PREV_COMMIT_SHA=$(git log -1 --pretty=format:%H -- CHANGELOG.md 2>/dev/null || git rev-parse HEAD^)
          extract_features <(git show HEAD:README.md) > current_features.txt
          extract_features <(git show $PREV_COMMIT_SHA:README.md 2>/dev/null) > prev_features.txt
          CHANGES=$(diff prev_features.txt current_features.txt | grep '^> ' | sed 's/> //')
          if [ -z "$CHANGES" ]; then
            echo "No new features found in README.md since last changelog update. Skipping."
            exit 0
          fi
          echo "New features found. Updating CHANGELOG.md."
          VERSION=${{ needs.build-and-push.outputs.version }}
          DATE=$(date +%Y-%m-%d)
          { echo "## [v$VERSION] - $DATE"; echo; echo "### Added or Changed"; echo "$CHANGES"; echo; cat CHANGELOG.md 2>/dev/null; } > CHANGELOG.md.new
          mv CHANGELOG.md.new CHANGELOG.md
          git add CHANGELOG.md
          # Only commit and push if there are actual changes
          if git diff --staged --quiet; then
            echo "No changes to commit to CHANGELOG.md."
          else
            git commit -m "docs: Update CHANGELOG.md for version v$VERSION [skip ci]"
            git push
          fi
