name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test
        options: >-
          --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install backend dependencies
        run: |
          cd backend
      - name: Check for major or minor version change and tag
        id: version_tag
        run: |
          set -e
          if [ ! -f VERSION ]; then echo "VERSION file not found"; exit 1; fi
          MAJOR=$(cut -d'.' -f1 VERSION)
          MINOR=$(cut -d'.' -f2 VERSION)
          PREV_MAJOR=$(git show HEAD^:VERSION 2>/dev/null | cut -d'.' -f1 || echo "")
          PREV_MINOR=$(git show HEAD^:VERSION 2>/dev/null | cut -d'.' -f2 || echo "")
          if [ "$MAJOR" != "$PREV_MAJOR" ] || [ "$MINOR" != "$PREV_MINOR" ]; then
            TAG="v$MAJOR.$MINOR.0"
            echo "Major or minor version changed: $PREV_MAJOR.$PREV_MINOR -> $MAJOR.$MINOR. Creating tag $TAG."
            git config user.name "github-actions"
            git config user.email "github-actions@github.com"
            git tag $TAG
            git push origin $TAG
          else
            echo "No major or minor version change detected."
          fi
          pip install -r requirements.txt
      - name: Run backend tests
        run: |
          cd backend
          pytest || echo "No tests found"
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm install
      - name: Run frontend build
        run: |
          cd frontend
          npm run build
      - name: Build Docker images
        run: |
          docker-compose build
      - name: Log in to GitHub Container Registry
        run: echo ${{ secrets.CR_PAT }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Tag backend image
        run: docker tag onetimeshare_backend ghcr.io/stormbl8/onetimeshare-backend:latest
      - name: Tag frontend image
        run: docker tag onetimeshare_frontend ghcr.io/stormbl8/onetimeshare-frontend:latest
      - name: Push backend image
        run: docker push ghcr.io/stormbl8/onetimeshare-backend:latest
      - name: Push frontend image
        run: docker push ghcr.io/stormbl8/onetimeshare-frontend:latest
